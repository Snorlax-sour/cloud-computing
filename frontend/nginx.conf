# Nginx 核心配置
worker_processes auto;
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types; # 包含 MIME 類型，以便正確服務檔案
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    # 定義一個上游伺服器組，指向你的後端服務
    # 'backend' 是你的 docker-compose.yaml 中定義的後端服務名稱
    # '8080' 是後端應用程式在容器內部監聽的埠口 (不是主機映射的埠口)
    upstream backend_service {
        server backend:8080;
    }

    server {
        listen 80; # Nginx 監聽容器內部的 80 埠
        server_name localhost; # 這裡可以寫你的域名，開發時用 localhost 即可

        # 根目錄指向靜態檔案的存放位置
        root /usr/share/nginx/html;

        # 處理所有請求
        location / {
            # 嘗試按順序服務檔案：
            # 1. 如果請求的路徑直接對應一個檔案，則服務它。
            # 2. 如果請求的路徑是一個目錄，則嘗試服務該目錄下的 index.html。
            # 3. 如果以上都不匹配，則轉向 /index.html (適用於單頁應用程式，確保刷新不會 404)
            try_files $uri $uri/ /index.html;
        }

        # 服務 /static/ 下的靜態檔案 (CSS, JS, Images 等)
        # 這裡的 root 與上面的 root 相同，但是 /static/ 提供了更好的路徑管理
        location /static/ {
            alias /usr/share/nginx/html/static/; # Nginx 會從 /usr/share/nginx/html/static/ 提供檔案
            # 通常不需要 try_files，除非有更複雜的路由邏輯
            # 這裡可以添加 cache control 頭部等優化
            expires 30d; # 讓瀏覽器快取靜態檔案 30 天
            add_header Cache-Control "public, must-revalidate";
        }


        # 將所有 /api/ 開頭的請求反向代理到後端服務, so in the case, the front-edn need add "/api/" prefix
        location /api/ {
            proxy_pass http://backend_service; # 轉發到上面定義的 upstream, when add / in the end, for example: http://backend_service/ <-- add / in the end, 
		     # 如果前端發出請求到 /api/products
#Nginx 會將這個請求代理到 http://backend_service/products
#此時：
#
#前端 JavaScript 仍然需要 /api/ 前綴：fetch('/api/products')
#但 Go 後端程式碼中的路由則不需要 /api/ 前綴：

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # 如果後端需要 Websocket，也需要配置
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";
        }

        # 錯誤頁面配置 (可選)
        error_page 404 /404.html;
        location = /404.html {
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
        }
    }
}
